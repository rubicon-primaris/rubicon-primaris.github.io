---
const { blocks } = Astro.props;

// Función para renderizar el texto con estilos aplicados
function renderRichText(richText) {
  return richText.map((text, index) => {
    const { annotations, plain_text, href } = text;

    let classs = '';
    if (annotations.bold) classs += 'font-bold ';
    if (annotations.italic) classs += 'italic ';
    if (annotations.underline) classs += 'underline ';
    if (annotations.strikethrough) classs += 'line-through ';
    if (annotations.code) classs += 'font-mono bg-gray-200 px-1 py-0.5 rounded ';

    if (href) {
      return `<a href="${href}" class="text-blue-600 underline ${classs.trim()}">${plain_text}</a>`;
    } else {
      return `<span class="${classs.trim()}">${plain_text}</span>`;
    }
  }).join('');
}

// Función para renderizar cada tipo de bloque
function renderBlock(block) {
  console.log(block);
  switch (block.type) {
    case 'divider':
      return `<hr class="my-4"/>`;

    case 'paragraph':
      return `<p class="mb-4">${renderRichText(block.paragraph.rich_text)}</p>`;

    case 'heading_1':
      return `<h1 class="text-3xl font-bold mb-4">${renderRichText(block.heading_1.rich_text)}</h1>`;

    case 'heading_2':
      return `<h2 class="text-2xl font-semibold mb-4">${renderRichText(block.heading_2.rich_text)}</h2>`;

    case 'heading_3':
      return `<h3 class="text-xl font-medium mb-4">${renderRichText(block.heading_3.rich_text)}</h3>`;

    case 'bulleted_list_item':
      return `<li class="list-disc list-inside">${renderRichText(block.bulleted_list_item.rich_text)}</li>`;

    case 'numbered_list_item':
      return `<li class="list-decimal list-inside">${renderRichText(block.numbered_list_item.rich_text)}</li>`;

    case 'child_page':
      return `<div class="p-4 bg-gray-100 rounded mb-4"><strong>Página:</strong> ${block.child_page.title}</div>`;

    case 'image':
      return `<img src='${block.image}' class="h-20 w-20"/>`;

    default:
      return `<p class="text-red-500">[Bloque no soportado: ${block.type}]</p>`;
  }
}

---

<div class="space-y-4">
  {blocks && blocks.length > 0 ? (
    blocks.map((block) => <div set:html={renderBlock(block)} />)
  ) : (
    <p>No hay contenido para mostrar.</p>
  )}
</div>
